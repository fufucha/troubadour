name: .NET Build

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x.x

      # Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore

      # Download Dalamud
      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"

      # Build the project in Release mode
      - name: Build
        run: |
          dotnet build --no-restore --configuration Release --nologo

      # Verify that latest.zip exists
      - name: Verify latest.zip
        run: |
          if (!(Test-Path -Path ./Troubadour/bin/Release/Troubadour/latest.zip)) {
            throw "latest.zip not found in Release output"
          }
        shell: pwsh

      # Generate checksums for the build artifact
      - name: Generate Checksums
        run: |
          sha512sum ./Troubadour/bin/Release/Troubadour/latest.zip > checksums.sha512

      # Update repo.json
      - name: Update repo.json
        run: |
          release_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
          repo_url=$(echo ${{ github.server_url }}/${{ github.repository }} | sed 's/#/\\#/g')

          sed -i repo.json -E \
              -e 's#"AssemblyVersion": "([0-9]*\.){2,3}[0-9]*"#"AssemblyVersion": "'"$release_version"'"#g' \
              -e 's#"TestingAssemblyVersion": "([0-9]*\.){2,3}[0-9]*"#"TestingAssemblyVersion": "'"$release_version"'"#g' \
              -e 's#"DownloadLinkInstall": "[^"]*"#"DownloadLinkInstall": "'"$repo_url/releases/download/${{ github.ref_name }}/latest.zip"'"#g' \
              -e 's#"DownloadLinkTesting": "[^"]*"#"DownloadLinkTesting": "'"$repo_url/releases/download/${{ github.ref_name }}/latest.zip"'"#g' \
              -e 's#"DownloadLinkUpdate": "[^"]*"#"DownloadLinkUpdate": "'"$repo_url/releases/download/${{ github.ref_name }}/latest.zip"'"#g'
        shell: bash

      # Commit and push the updated repo.json
      - name: Commit and Push Updated repo.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add repo.json
          git commit -m "Update repo.json for release ${{ github.ref_name }}"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the build artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Release Artifacts
          path: |
            ./Troubadour/bin/Release/Troubadour/latest.zip
            checksums.sha512

      # Create the GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./Troubadour/bin/Release/Troubadour/latest.zip
            checksums.sha512
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
